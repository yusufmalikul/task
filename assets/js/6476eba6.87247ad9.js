"use strict";(self.webpackChunktaskfile_dev=self.webpackChunktaskfile_dev||[]).push([[827],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,k=c["".concat(r,".").concat(u)]||c[u]||m[u]||s;return t?a.createElement(k,l(l({ref:n},d),{},{components:t})):a.createElement(k,l({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,l=new Array(s);l[0]=c;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<s;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2175:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return r},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),l=["components"],o={slug:"/usage/",sidebar_position:3},r="Usage",p={unversionedId:"usage",id:"usage",title:"Usage",description:"Getting started",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage/",permalink:"/usage/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/usage/",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/installation/"},next:{title:"API Reference",permalink:"/api/"}},d={},m=[{value:"Getting started",id:"getting-started",level:2},{value:"Supported file names",id:"supported-file-names",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Task",id:"task",level:3},{value:".env files",id:"env-files",level:3},{value:"Including other Taskfiles",id:"including-other-taskfiles",level:2},{value:"OS-specific Taskfiles",id:"os-specific-taskfiles",level:3},{value:"Directory of included Taskfile",id:"directory-of-included-taskfile",level:3},{value:"Optional includes",id:"optional-includes",level:3},{value:"Internal includes",id:"internal-includes",level:3},{value:"Vars of included Taskfiles",id:"vars-of-included-taskfiles",level:3},{value:"Internal tasks",id:"internal-tasks",level:2},{value:"Task directory",id:"task-directory",level:2},{value:"Task dependencies",id:"task-dependencies",level:2},{value:"Calling another task",id:"calling-another-task",level:2},{value:"Prevent unnecessary work",id:"prevent-unnecessary-work",level:2},{value:"By fingerprinting locally generated files and their sources",id:"by-fingerprinting-locally-generated-files-and-their-sources",level:3},{value:"Using programmatic checks to indicate a task is up to date.",id:"using-programmatic-checks-to-indicate-a-task-is-up-to-date",level:3},{value:"Using programmatic checks to cancel the execution of a task and its dependencies",id:"using-programmatic-checks-to-cancel-the-execution-of-a-task-and-its-dependencies",level:3},{value:"Limiting when tasks run",id:"limiting-when-tasks-run",level:3},{value:"Variables",id:"variables",level:2},{value:"Dynamic variables",id:"dynamic-variables",level:3},{value:"Forwarding CLI arguments to commands",id:"forwarding-cli-arguments-to-commands",level:2},{value:"Doing task cleanup with <code>defer</code>",id:"doing-task-cleanup-with-defer",level:2},{value:"Go&#39;s template engine",id:"gos-template-engine",level:2},{value:"Help",id:"help",level:2},{value:"Display summary of task",id:"display-summary-of-task",level:2},{value:"Overriding task name",id:"overriding-task-name",level:2},{value:"Silent mode",id:"silent-mode",level:2},{value:"Dry run mode",id:"dry-run-mode",level:2},{value:"Ignore errors",id:"ignore-errors",level:2},{value:"Output syntax",id:"output-syntax",level:2},{value:"Interactive CLI application",id:"interactive-cli-application",level:2},{value:"Short task syntax",id:"short-task-syntax",level:2},{value:"Watch tasks",id:"watch-tasks",level:2}],c={toc:m};function u(e){var n=e.components,t=(0,i.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"usage"},"Usage"),(0,s.kt)("h2",{id:"getting-started"},"Getting started"),(0,s.kt)("p",null,"Create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile.yml")," in the root of your project.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"cmds")," attribute should contain the commands of a task.\nThe example below allows compiling a Go app and uses ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tdewolff/minify/tree/master/cmd/minify"},"Minify")," to concat\nand minify multiple CSS files into a single one."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build -v -i main.go\n\n  assets:\n    cmds:\n      - minify -o public/style.css src/css\n")),(0,s.kt)("p",null,"Running the tasks is as simple as running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"task assets build\n")),(0,s.kt)("p",null,"Task uses ",(0,s.kt)("a",{parentName:"p",href:"https://mvdan.cc/sh/"},"mvdan.cc/sh"),", a native Go sh\ninterpreter. So you can write sh/bash commands, and it will work even on\nWindows, where ",(0,s.kt)("inlineCode",{parentName:"p"},"sh")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"bash")," are usually not available. Just remember any\nexecutable called must be available by the OS or in PATH."),(0,s.kt)("p",null,'If you omit a task name, "default" will be assumed.'),(0,s.kt)("h2",{id:"supported-file-names"},"Supported file names"),(0,s.kt)("p",null,"Task will look for the following file names, in order of priority:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Taskfile.yml"),(0,s.kt)("li",{parentName:"ul"},"Taskfile.yaml"),(0,s.kt)("li",{parentName:"ul"},"Taskfile.dist.yml"),(0,s.kt)("li",{parentName:"ul"},"Taskfile.dist.yaml")),(0,s.kt)("p",null,"The intention of having the ",(0,s.kt)("inlineCode",{parentName:"p"},".dist")," variants is to allow projects to have one\ncommitted version (",(0,s.kt)("inlineCode",{parentName:"p"},".dist"),") while still allowing individual users to override\nthe Taskfile by adding an additional ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile.yml")," (which would be on\n",(0,s.kt)("inlineCode",{parentName:"p"},".gitignore"),")."),(0,s.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,s.kt)("h3",{id:"task"},"Task"),(0,s.kt)("p",null,"You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"env")," to set custom environment variables for a specific task:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  greet:\n    cmds:\n      - echo $GREETING\n    env:\n      GREETING: Hey, there!\n")),(0,s.kt)("p",null,"Additionally, you can set global environment variables that will be available\nto all tasks:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nenv:\n  GREETING: Hey, there!\n\ntasks:\n  greet:\n    cmds:\n      - echo $GREETING\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"env")," supports expansion and retrieving output from a shell command\njust like variables, as you can see in the ",(0,s.kt)("a",{parentName:"p",href:"#variables"},"Variables")," section."))),(0,s.kt)("h3",{id:"env-files"},".env files"),(0,s.kt)("p",null,"You can also ask Task to include ",(0,s.kt)("inlineCode",{parentName:"p"},".env")," like files by using the ",(0,s.kt)("inlineCode",{parentName:"p"},"dotenv:"),"\nsetting:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".env"',title:'".env"'},"KEYNAME=VALUE\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="testing/.env"',title:'"testing/.env"'},"ENDPOINT=testing.com\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Taskfile.yml"',title:'"Taskfile.yml"'},"version: '3'\n\nenv:\n  ENV: testing\n\ndotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']\n\ntasks:\n  greet:\n    cmds:\n      - echo \"Using $KEYNAME and endpoint $ENDPOINT\"\n")),(0,s.kt)("h2",{id:"including-other-taskfiles"},"Including other Taskfiles"),(0,s.kt)("p",null,"If you want to share tasks between different projects (Taskfiles), you can use\nthe importing mechanism to include other Taskfiles using the ",(0,s.kt)("inlineCode",{parentName:"p"},"includes")," keyword:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  docs: ./documentation # will look for ./documentation/Taskfile.yml\n  docker: ./DockerTasks.yml\n")),(0,s.kt)("p",null,"The tasks described in the given Taskfiles will be available with the informed\nnamespace. So, you'd call ",(0,s.kt)("inlineCode",{parentName:"p"},"task docs:serve")," to run the ",(0,s.kt)("inlineCode",{parentName:"p"},"serve")," task from\n",(0,s.kt)("inlineCode",{parentName:"p"},"documentation/Taskfile.yml")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"task docker:build")," to run the ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," task\nfrom the ",(0,s.kt)("inlineCode",{parentName:"p"},"DockerTasks.yml")," file."),(0,s.kt)("p",null,"Relative paths are resolved relative to the directory containing the including Taskfile."),(0,s.kt)("h3",{id:"os-specific-taskfiles"},"OS-specific Taskfiles"),(0,s.kt)("p",null,"With ",(0,s.kt)("inlineCode",{parentName:"p"},"version: '2'"),", task automatically includes any ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile_{{OS}}.yml"),"\nif it exists (for example: ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile_windows.yml"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile_linux.yml")," or\n",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile_darwin.yml"),"). Since this behavior was a bit too implicit, it\nwas removed on version 3, but you still can have a similar behavior by\nexplicitly importing these files:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  build: ./Taskfile_{{OS}}.yml\n")),(0,s.kt)("h3",{id:"directory-of-included-taskfile"},"Directory of included Taskfile"),(0,s.kt)("p",null,"By default, included Taskfile's tasks are run in the current directory, even\nif the Taskfile is in another directory, but you can force its tasks to run\nin another directory by using this alternative syntax:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  docs:\n    taskfile: ./docs/Taskfile.yml\n    dir: ./docs\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The included Taskfiles must be using the same schema version as the main\nTaskfile uses."))),(0,s.kt)("h3",{id:"optional-includes"},"Optional includes"),(0,s.kt)("p",null,"Includes marked as optional will allow Task to continue execution as normal if\nthe included file is missing."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  tests:\n    taskfile: ./tests/Taskfile.yml\n    optional: true\n\ntasks:\n  greet:\n    cmds:\n      - echo \"This command can still be successfully executed if ./tests/Taskfile.yml does not exist\"\n")),(0,s.kt)("h3",{id:"internal-includes"},"Internal includes"),(0,s.kt)("p",null,"Includes marked as internal will set all the tasks of the included file to be\ninternal as well (see the ",(0,s.kt)("a",{parentName:"p",href:"#internal-tasks"},"Internal tasks")," section below).\nThis is useful when including utility tasks that are not intended to be used\ndirectly by the user."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  tests:\n    taskfile: ./taskfiles/Utils.yml\n    internal: true\n")),(0,s.kt)("h3",{id:"vars-of-included-taskfiles"},"Vars of included Taskfiles"),(0,s.kt)("p",null,"You can also specify variables when including a Taskfile. This may be useful\nfor having reusable Taskfile that can be tweaked or even included more than once:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nincludes:\n  backend:\n    taskfile: ./taskfiles/Docker.yml\n    vars:\n      DOCKER_IMAGE: backend_image\n\n  frontend:\n    taskfile: ./taskfiles/Docker.yml\n    vars:\n      DOCKER_IMAGE: frontend_image\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Vars declared in the included Taskfile have preference over the\nvariables in the including Taskfile! If you want a variable in an included Taskfile to be overridable,\nuse the ",(0,s.kt)("a",{parentName:"p",href:"https://go-task.github.io/slim-sprig/defaults.html"},"default function"),":\n",(0,s.kt)("inlineCode",{parentName:"p"},"MY_VAR: '{{.MY_VAR | default \"my-default-value\"}}'"),"."))),(0,s.kt)("h2",{id:"internal-tasks"},"Internal tasks"),(0,s.kt)("p",null,"Internal tasks are tasks that cannot be called directly by the user. They will\nnot appear in the output when running ",(0,s.kt)("inlineCode",{parentName:"p"},"task --list|--list-all"),". Other tasks may\ncall internal tasks in the usual way. This is useful for creating reusable,\nfunction-like tasks that have no useful purpose on the command line."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build-image-1:\n    cmds:\n      - task: build-image\n        vars:\n          DOCKER_IMAGE: image-1\n\n  build-image:\n    internal: true\n    cmds:\n      - docker build -t {{.DOCKER_IMAGE}} .\n")),(0,s.kt)("h2",{id:"task-directory"},"Task directory"),(0,s.kt)("p",null,"By default, tasks will be executed in the directory where the Taskfile is\nlocated. But you can easily make the task run in another folder, informing\n",(0,s.kt)("inlineCode",{parentName:"p"},"dir"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  serve:\n    dir: public/www\n    cmds:\n      # run http server\n      - caddy\n")),(0,s.kt)("p",null,"If the directory does not exist, ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," creates it."),(0,s.kt)("h2",{id:"task-dependencies"},"Task dependencies"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Dependencies run in parallel, so dependencies of a task should not depend one\nanother. If you want to force tasks to run serially, take a look at the\n",(0,s.kt)("a",{parentName:"p",href:"#calling-another-task"},"Calling Another Task")," section below.")),(0,s.kt)("p",null,"You may have tasks that depend on others. Just pointing them on ",(0,s.kt)("inlineCode",{parentName:"p"},"deps")," will\nmake them run automatically before running the parent task:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    deps: [assets]\n    cmds:\n      - go build -v -i main.go\n\n  assets:\n    cmds:\n      - minify -o public/style.css src/css\n")),(0,s.kt)("p",null,"In the above example, ",(0,s.kt)("inlineCode",{parentName:"p"},"assets")," will always run right before ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," if you run\n",(0,s.kt)("inlineCode",{parentName:"p"},"task build"),"."),(0,s.kt)("p",null,"A task can have only dependencies and no commands to group tasks together:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  assets:\n    deps: [js, css]\n\n  js:\n    cmds:\n      - minify -o public/script.js src/js\n\n  css:\n    cmds:\n      - minify -o public/style.css src/css\n")),(0,s.kt)("p",null,"If there is more than one dependency, they always run in parallel for better\nperformance."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You can also make the tasks given by the command line run in parallel by\nusing the ",(0,s.kt)("inlineCode",{parentName:"p"},"--parallel")," flag (alias ",(0,s.kt)("inlineCode",{parentName:"p"},"-p"),"). Example: ",(0,s.kt)("inlineCode",{parentName:"p"},"task --parallel js css"),"."))),(0,s.kt)("p",null,"If you want to pass information to dependencies, you can do that the same\nmanner as you would to ",(0,s.kt)("a",{parentName:"p",href:"#calling-another-task"},"call another task"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\ntasks:\n  default:\n    deps:\n      - task: echo_sth\n        vars: {TEXT: "before 1"}\n      - task: echo_sth\n        vars: {TEXT: "before 2"}\n    cmds:\n      - echo "after"\n\n  echo_sth:\n    cmds:\n      - echo {{.TEXT}}\n')),(0,s.kt)("h2",{id:"calling-another-task"},"Calling another task"),(0,s.kt)("p",null,"When a task has many dependencies, they are executed concurrently. This will\noften result in a faster build pipeline. However, in some situations, you may need\nto call other tasks serially. In this case, use the following syntax:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\ntasks:\n  main-task:\n    cmds:\n      - task: task-to-be-called\n      - task: another-task\n      - echo "Both done"\n\n  task-to-be-called:\n    cmds:\n      - echo "Task to be called"\n\n  another-task:\n    cmds:\n      - echo "Another task"\n')),(0,s.kt)("p",null,"Overriding variables in the called task is as simple as informing ",(0,s.kt)("inlineCode",{parentName:"p"},"vars"),"\nattribute:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\ntasks:\n  greet:\n    vars:\n      RECIPIENT: \'{{default "World" .RECIPIENT}}\'\n    cmds:\n      - echo "Hello, {{.RECIPIENT}}!"\n\n  greet-pessimistically:\n    cmds:\n      - task: greet\n        vars: {RECIPIENT: "Cruel World"}\n')),(0,s.kt)("p",null,"The above syntax is also supported in ",(0,s.kt)("inlineCode",{parentName:"p"},"deps"),"."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"NOTE: If you want to call a task declared in the root Taskfile from within an\n",(0,s.kt)("a",{parentName:"p",href:"#including-other-taskfiles"},"included Taskfile"),", add a leading ",(0,s.kt)("inlineCode",{parentName:"p"},":")," like this:\n",(0,s.kt)("inlineCode",{parentName:"p"},"task: :task-name"),"."))),(0,s.kt)("h2",{id:"prevent-unnecessary-work"},"Prevent unnecessary work"),(0,s.kt)("h3",{id:"by-fingerprinting-locally-generated-files-and-their-sources"},"By fingerprinting locally generated files and their sources"),(0,s.kt)("p",null,"If a task generates something, you can inform Task the source and generated\nfiles, so Task will prevent running them if not necessary."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    deps: [js, css]\n    cmds:\n      - go build -v -i main.go\n\n  js:\n    cmds:\n      - minify -o public/script.js src/js\n    sources:\n      - src/js/**/*.js\n    generates:\n      - public/script.js\n\n  css:\n    cmds:\n      - minify -o public/style.css src/css\n    sources:\n      - src/css/**/*.css\n    generates:\n      - public/style.css\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"sources")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"generates")," can be files or file patterns. When given,\nTask will compare the checksum of the source files to determine if it's\nnecessary to run the task. If not, it will just print a message like\n",(0,s.kt)("inlineCode",{parentName:"p"},'Task "js" is up to date'),"."),(0,s.kt)("p",null,"If you prefer this check to be made by the modification timestamp of the files,\ninstead of its checksum (content), just set the ",(0,s.kt)("inlineCode",{parentName:"p"},"method")," property to ",(0,s.kt)("inlineCode",{parentName:"p"},"timestamp"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build .\n    sources:\n      - ./*.go\n    generates:\n      - app{{exeExt}}\n    method: timestamp\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"By default, task stores checksums on a local ",(0,s.kt)("inlineCode",{parentName:"p"},".task")," directory in the project's\ndirectory. Most of the time, you'll want to have this directory on ",(0,s.kt)("inlineCode",{parentName:"p"},".gitignore"),"\n(or equivalent) so it isn't committed. (If you have a task for code generation\nthat is committed it may make sense to commit the checksum of that task as\nwell, though)."),(0,s.kt)("p",{parentName:"div"},"If you want these files to be stored in another directory, you can set a\n",(0,s.kt)("inlineCode",{parentName:"p"},"TASK_TEMP_DIR")," environment variable in your machine. It can contain a relative\npath like ",(0,s.kt)("inlineCode",{parentName:"p"},"tmp/task")," that will be interpreted as relative to the project\ndirectory, or an absolute or home path like ",(0,s.kt)("inlineCode",{parentName:"p"},"/tmp/.task")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"~/.task"),"\n(subdirectories will be created for each project)."),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"export TASK_TEMP_DIR='~/.task'\n")))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Each task has only one checksum stored for its ",(0,s.kt)("inlineCode",{parentName:"p"},"sources"),". If you want\nto distinguish a task by any of its input variables, you can add those\nvariables as part of the task's label, and it will be considered a different\ntask."),(0,s.kt)("p",{parentName:"div"},"This is useful if you want to run a task once for each distinct set of\ninputs until the sources actually change. For example, if the sources depend\non the value of a variable, or you if you want the task to rerun if some arguments\nchange even if the source has not."))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The method ",(0,s.kt)("inlineCode",{parentName:"p"},"none")," skips any validation and always run the task."))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"For the ",(0,s.kt)("inlineCode",{parentName:"p"},"checksum")," (default) method to work, it is only necessary to\ninform the source files, but if you want to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"timestamp")," method, you\nalso need to inform the generated files with ",(0,s.kt)("inlineCode",{parentName:"p"},"generates"),"."))),(0,s.kt)("h3",{id:"using-programmatic-checks-to-indicate-a-task-is-up-to-date"},"Using programmatic checks to indicate a task is up to date."),(0,s.kt)("p",null,"Alternatively, you can inform a sequence of tests as ",(0,s.kt)("inlineCode",{parentName:"p"},"status"),". If no error\nis returned (exit status 0), the task is considered up-to-date:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    status:\n      - test -d directory\n      - test -f directory/file1.txt\n      - test -f directory/file2.txt\n")),(0,s.kt)("p",null,"Normally, you would use ",(0,s.kt)("inlineCode",{parentName:"p"},"sources")," in combination with\n",(0,s.kt)("inlineCode",{parentName:"p"},"generates")," - but for tasks that generate remote artifacts (Docker images,\ndeploys, CD releases) the checksum source and timestamps require either\naccess to the artifact or for an out-of-band refresh of the ",(0,s.kt)("inlineCode",{parentName:"p"},".checksum"),"\nfingerprint file."),(0,s.kt)("p",null,"Two special variables ",(0,s.kt)("inlineCode",{parentName:"p"},"{{.CHECKSUM}}")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"{{.TIMESTAMP}}")," are available\nfor interpolation within ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," commands, depending on the method assigned\nto fingerprint the sources. Only ",(0,s.kt)("inlineCode",{parentName:"p"},"source")," globs are fingerprinted."),(0,s.kt)("p",null,"Note that the ",(0,s.kt)("inlineCode",{parentName:"p"},"{{.TIMESTAMP}}"),' variable is a "live" Go ',(0,s.kt)("inlineCode",{parentName:"p"},"time.Time")," struct, and\ncan be formatted using any of the methods that ",(0,s.kt)("inlineCode",{parentName:"p"},"time.Time")," responds to."),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://golang.org/pkg/time/"},"the Go Time documentation")," for more information."),(0,s.kt)("p",null,"You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"--force")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"-f")," if you want to force a task to run even when\nup-to-date."),(0,s.kt)("p",null,"Also, ",(0,s.kt)("inlineCode",{parentName:"p"},"task --status [tasks]...")," will exit with a non-zero exit code if any of\nthe tasks are not up-to-date."),(0,s.kt)("h3",{id:"using-programmatic-checks-to-cancel-the-execution-of-a-task-and-its-dependencies"},"Using programmatic checks to cancel the execution of a task and its dependencies"),(0,s.kt)("p",null,"In addition to ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," checks, ",(0,s.kt)("inlineCode",{parentName:"p"},"preconditions")," checks are\nthe logical inverse of ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," checks.  That is, if you need a certain set of\nconditions to be ",(0,s.kt)("em",{parentName:"p"},"true")," you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"preconditions")," stanza.\n",(0,s.kt)("inlineCode",{parentName:"p"},"preconditions")," are similar to ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," lines, except they support ",(0,s.kt)("inlineCode",{parentName:"p"},"sh"),"\nexpansion, and they SHOULD all return 0."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\ntasks:\n  generate-files:\n    cmds:\n      - mkdir directory\n      - touch directory/file1.txt\n      - touch directory/file2.txt\n    # test existence of files\n    preconditions:\n      - test -f .env\n      - sh: "[ 1 = 0 ]"\n        msg: "One doesn\'t equal Zero, Halting"\n')),(0,s.kt)("p",null,"Preconditions can set specific failure messages that can tell\na user what steps to take using the ",(0,s.kt)("inlineCode",{parentName:"p"},"msg")," field."),(0,s.kt)("p",null,"If a task has a dependency on a sub-task with a precondition, and that\nprecondition is not met - the calling task will fail.  Note that a task\nexecuted with a failing precondition will not run unless ",(0,s.kt)("inlineCode",{parentName:"p"},"--force")," is\ngiven."),(0,s.kt)("p",null,"Unlike ",(0,s.kt)("inlineCode",{parentName:"p"},"status"),", which will skip a task if it is up to date and continue\nexecuting tasks that depend on it, a ",(0,s.kt)("inlineCode",{parentName:"p"},"precondition")," will fail a task, along\nwith any other tasks that depend on it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\ntasks:\n  task-will-fail:\n    preconditions:\n      - sh: "exit 1"\n\n  task-will-also-fail:\n    deps:\n      - task-will-fail\n\n  task-will-still-fail:\n    cmds:\n      - task: task-will-fail\n      - echo "I will not run"\n')),(0,s.kt)("h3",{id:"limiting-when-tasks-run"},"Limiting when tasks run"),(0,s.kt)("p",null,"If a task executed by multiple ",(0,s.kt)("inlineCode",{parentName:"p"},"cmds")," or multiple ",(0,s.kt)("inlineCode",{parentName:"p"},"deps")," you can control\nwhen it is executed using ",(0,s.kt)("inlineCode",{parentName:"p"},"run"),". ",(0,s.kt)("inlineCode",{parentName:"p"},"run")," can also be set at the root\nof the Taskfile to change the behavior of all the tasks unless explicitly\noverridden."),(0,s.kt)("p",null,"Supported values for ",(0,s.kt)("inlineCode",{parentName:"p"},"run"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"always")," (default) always attempt to invoke the task regardless of the\nnumber of previous executions"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"once")," only invoke this task once regardless of the number of references"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"when_changed")," only invokes the task once for each unique set of variables\npassed into the task")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  default:\n    cmds:\n      - task: generate-file\n        vars: { CONTENT: '1' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n      - task: generate-file\n        vars: { CONTENT: '2' }\n\n  generate-file:\n    run: when_changed\n    deps:\n      - install-deps\n    cmds:\n      - echo {{.CONTENT}}\n\n  install-deps:\n    run: once\n    cmds:\n      - sleep 5 # long operation like installing packages\n")),(0,s.kt)("h2",{id:"variables"},"Variables"),(0,s.kt)("p",null,"When doing interpolation of variables, Task will look for the below.\nThey are listed below in order of importance (i.e. most important first):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Variables declared in the task definition"),(0,s.kt)("li",{parentName:"ul"},"Variables given while calling a task from another\n(See ",(0,s.kt)("a",{parentName:"li",href:"#calling-another-task"},"Calling another task")," above)"),(0,s.kt)("li",{parentName:"ul"},"Variables of the ",(0,s.kt)("a",{parentName:"li",href:"#including-other-taskfiles"},"included Taskfile")," (when the task is included)"),(0,s.kt)("li",{parentName:"ul"},"Variables of the ",(0,s.kt)("a",{parentName:"li",href:"#vars-of-included-taskfiles"},"inclusion of the Taskfile")," (when the task is included)"),(0,s.kt)("li",{parentName:"ul"},"Global variables (those declared in the ",(0,s.kt)("inlineCode",{parentName:"li"},"vars:")," option in the Taskfile)"),(0,s.kt)("li",{parentName:"ul"},"Environment variables")),(0,s.kt)("p",null,"Example of sending parameters with environment variables:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ TASK_VARIABLE=a-value task do-something\n")),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"A special variable ",(0,s.kt)("inlineCode",{parentName:"p"},".TASK")," is always available containing the task name."))),(0,s.kt)("p",null,"Since some shells do not support the above syntax to set environment variables\n(Windows) tasks also accept a similar style when not at the beginning of\nthe command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ task write-file FILE=file.txt "CONTENT=Hello, World!" print "MESSAGE=All done!"\n')),(0,s.kt)("p",null,"Example of locally declared vars:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  print-var:\n    cmds:\n      - echo \"{{.VAR}}\"\n    vars:\n      VAR: Hello!\n")),(0,s.kt)("p",null,"Example of global vars in a ",(0,s.kt)("inlineCode",{parentName:"p"},"Taskfile.yml"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nvars:\n  GREETING: Hello from Taskfile!\n\ntasks:\n  greet:\n    cmds:\n      - echo \"{{.GREETING}}\"\n")),(0,s.kt)("h3",{id:"dynamic-variables"},"Dynamic variables"),(0,s.kt)("p",null,"The below syntax (",(0,s.kt)("inlineCode",{parentName:"p"},"sh:")," prop in a variable) is considered a dynamic variable.\nThe value will be treated as a command and the output assigned. If there are one\nor more trailing newlines, the last newline will be trimmed."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    cmds:\n      - go build -ldflags=\"-X main.Version={{.GIT_COMMIT}}\" main.go\n    vars:\n      GIT_COMMIT:\n        sh: git log -n 1 --format=%h\n")),(0,s.kt)("p",null,"This works for all types of variables."),(0,s.kt)("h2",{id:"forwarding-cli-arguments-to-commands"},"Forwarding CLI arguments to commands"),(0,s.kt)("p",null,"If ",(0,s.kt)("inlineCode",{parentName:"p"},"--")," is given in the CLI, all following parameters are added to a\nspecial ",(0,s.kt)("inlineCode",{parentName:"p"},".CLI_ARGS")," variable. This is useful to forward arguments to another\ncommand."),(0,s.kt)("p",null,"The below example will run ",(0,s.kt)("inlineCode",{parentName:"p"},"yarn install"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ task yarn -- install\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  yarn:\n    cmds:\n      - yarn {{.CLI_ARGS}}\n")),(0,s.kt)("h2",{id:"doing-task-cleanup-with-defer"},"Doing task cleanup with ",(0,s.kt)("inlineCode",{parentName:"h2"},"defer")),(0,s.kt)("p",null,"With the ",(0,s.kt)("inlineCode",{parentName:"p"},"defer")," keyword, it's possible to schedule cleanup to be run once\nthe task finishes. The difference with just putting it as the last command is\nthat this command will run even when the task fails."),(0,s.kt)("p",null,"In the example below, ",(0,s.kt)("inlineCode",{parentName:"p"},"rm -rf tmpdir/")," will run even if the third command fails:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: rm -rf tmpdir/\n      - echo 'Do work on tmpdir/'\n")),(0,s.kt)("p",null,"If you want to move the cleanup command into another task, that is possible as\nwell:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  default:\n    cmds:\n      - mkdir -p tmpdir/\n      - defer: { task: cleanup }\n      - echo 'Do work on tmpdir/'\n\n  cleanup: rm -rf tmpdir/\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Due to the nature of how the\n",(0,s.kt)("a",{parentName:"p",href:"https://go.dev/tour/flowcontrol/13"},"Go's own ",(0,s.kt)("inlineCode",{parentName:"a"},"defer")," work"),", the deferred\ncommands are executed in the reverse order if you schedule multiple of them."))),(0,s.kt)("h2",{id:"gos-template-engine"},"Go's template engine"),(0,s.kt)("p",null,"Task parse commands as ",(0,s.kt)("a",{parentName:"p",href:"https://golang.org/pkg/text/template/"},"Go's template engine")," before executing\nthem. Variables are accessible through dot syntax (",(0,s.kt)("inlineCode",{parentName:"p"},".VARNAME"),")."),(0,s.kt)("p",null,"All functions by the Go's ",(0,s.kt)("a",{parentName:"p",href:"https://go-task.github.io/slim-sprig/"},"slim-sprig lib"),"\nare available. The following example gets the current date in a given format:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  print-date:\n    cmds:\n      - echo {{now | date \"2006-01-02\"}}\n")),(0,s.kt)("p",null,"Task also adds the following functions:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"OS"),': Returns the operating system. Possible values are "windows", "linux",\n"darwin" (macOS) and "freebsd".'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ARCH"),': return the architecture Task was compiled to: "386", "amd64", "arm"\nor "s390x".'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"splitLines"),": Splits Unix (\\n) and Windows (\\r\\n) styled newlines."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"catLines"),": Replaces Unix (\\n) and Windows (\\r\\n) styled newlines with a space."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"toSlash"),": Does nothing on Unix, but on Windows converts a string from ",(0,s.kt)("inlineCode",{parentName:"li"},"\\"),"\npath format to ",(0,s.kt)("inlineCode",{parentName:"li"},"/"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"fromSlash"),": Opposite of ",(0,s.kt)("inlineCode",{parentName:"li"},"toSlash"),". Does nothing on Unix, but on Windows\nconverts a string from ",(0,s.kt)("inlineCode",{parentName:"li"},"/")," path format to ",(0,s.kt)("inlineCode",{parentName:"li"},"\\"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"exeExt"),": Returns the right executable extension for the current OS\n(",(0,s.kt)("inlineCode",{parentName:"li"},'".exe"')," for Windows, ",(0,s.kt)("inlineCode",{parentName:"li"},'""')," for others)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"shellQuote"),": Quotes a string to make it safe for use in shell scripts.\nTask uses ",(0,s.kt)("a",{parentName:"li",href:"https://pkg.go.dev/mvdan.cc/sh/v3@v3.4.0/syntax#Quote"},"this Go function"),"\nfor this. The Bash dialect is assumed.")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  print-os:\n    cmds:\n      - echo '{{OS}} {{ARCH}}'\n      - echo '{{if eq OS \"windows\"}}windows-command{{else}}unix-command{{end}}'\n      # This will be path/to/file on Unix but path\\to\\file on Windows\n      - echo '{{fromSlash \"path/to/file\"}}'\n  enumerated-file:\n    vars:\n      CONTENT: |\n        foo\n        bar\n    cmds:\n      - |\n        cat << EOF > output.txt\n        {{range $i, $line := .CONTENT | splitLines -}}\n        {{printf \"%3d\" $i}}: {{$line}}\n        {{end}}EOF\n")),(0,s.kt)("h2",{id:"help"},"Help"),(0,s.kt)("p",null,"Running ",(0,s.kt)("inlineCode",{parentName:"p"},"task --list")," (or ",(0,s.kt)("inlineCode",{parentName:"p"},"task -l"),") lists all tasks with a description.\nThe following Taskfile:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build:\n    desc: Build the go binary.\n    cmds:\n      - go build -v -i main.go\n\n  test:\n    desc: Run all the go tests.\n    cmds:\n      - go test -race ./...\n\n  js:\n    cmds:\n      - minify -o public/script.js src/js\n\n  css:\n    cmds:\n      - minify -o public/style.css src/css\n")),(0,s.kt)("p",null,"would print the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"* build:   Build the go binary.\n* test:    Run all the go tests.\n")),(0,s.kt)("p",null,"If you want to see all tasks, there's a ",(0,s.kt)("inlineCode",{parentName:"p"},"--list-all")," (alias ",(0,s.kt)("inlineCode",{parentName:"p"},"-a"),") flag as well."),(0,s.kt)("h2",{id:"display-summary-of-task"},"Display summary of task"),(0,s.kt)("p",null,"Running ",(0,s.kt)("inlineCode",{parentName:"p"},"task --summary task-name")," will show a summary of a task.\nThe following Taskfile:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  release:\n    deps: [build]\n    summary: |\n      Release your project to github\n\n      It will build your project before starting the release.\n      Please make sure that you have set GITHUB_TOKEN before starting.\n    cmds:\n      - your-release-tool\n\n  build:\n    cmds:\n      - your-build-tool\n")),(0,s.kt)("p",null,"with running ",(0,s.kt)("inlineCode",{parentName:"p"},"task --summary release")," would print the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"task: release\n\nRelease your project to github\n\nIt will build your project before starting the release.\nPlease make sure that you have set GITHUB_TOKEN before starting.\n\ndependencies:\n - build\n\ncommands:\n - your-release-tool\n")),(0,s.kt)("p",null,"If a summary is missing, the description will be printed.\nIf the task does not have a summary or a description, a warning is printed."),(0,s.kt)("p",null,"Please note: ",(0,s.kt)("em",{parentName:"p"},"showing the summary will not execute the command"),"."),(0,s.kt)("h2",{id:"overriding-task-name"},"Overriding task name"),(0,s.kt)("p",null,"Sometimes you may want to override the task name printed on the summary, up-to-date\nmessages to STDOUT, etc. In this case, you can just set ",(0,s.kt)("inlineCode",{parentName:"p"},"label:"),", which can also\nbe interpolated with variables:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  default:\n    - task: print\n      vars:\n        MESSAGE: hello\n    - task: print\n      vars:\n        MESSAGE: world\n\n  print:\n    label: 'print-{{.MESSAGE}}'\n    cmds:\n      - echo \"{{.MESSAGE}}\"\n")),(0,s.kt)("h2",{id:"silent-mode"},"Silent mode"),(0,s.kt)("p",null,"Silent mode disables the echoing of commands before Task runs it.\nFor the following Taskfile:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n")),(0,s.kt)("p",null,"Normally this will be printed:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'echo "Print something"\nPrint something\n')),(0,s.kt)("p",null,"With silent mode on, the below will be printed instead:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"Print something\n")),(0,s.kt)("p",null,"There are four ways to enable silent mode:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"At command level:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: echo \"Print something\"\n        silent: true\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"At task level:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n    silent: true\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Globally at Taskfile level:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\nsilent: true\n\ntasks:\n  echo:\n    cmds:\n      - echo \"Print something\"\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Or globally with ",(0,s.kt)("inlineCode",{parentName:"li"},"--silent")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"-s")," flag")),(0,s.kt)("p",null,"If you want to suppress STDOUT instead, just redirect a command to ",(0,s.kt)("inlineCode",{parentName:"p"},"/dev/null"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - echo \"This will print nothing\" > /dev/null\n")),(0,s.kt)("h2",{id:"dry-run-mode"},"Dry run mode"),(0,s.kt)("p",null,"Dry run mode (",(0,s.kt)("inlineCode",{parentName:"p"},"--dry"),") compiles and steps through each task, printing the commands\nthat would be run without executing them. This is useful for debugging your Taskfiles."),(0,s.kt)("h2",{id:"ignore-errors"},"Ignore errors"),(0,s.kt)("p",null,"You have the option to ignore errors during command execution.\nGiven the following Taskfile:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - exit 1\n      - echo \"Hello World\"\n")),(0,s.kt)("p",null,"Task will abort the execution after running ",(0,s.kt)("inlineCode",{parentName:"p"},"exit 1")," because the status code ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," stands for ",(0,s.kt)("inlineCode",{parentName:"p"},"EXIT_FAILURE"),".\nHowever, it is possible to continue with execution using ",(0,s.kt)("inlineCode",{parentName:"p"},"ignore_error"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  echo:\n    cmds:\n      - cmd: exit 1\n        ignore_error: true\n      - echo \"Hello World\"\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ignore_error")," can also be set for a task, which means errors will be suppressed\nfor all commands. Nevertheless, keep in mind that this option will not propagate to other tasks\ncalled either by ",(0,s.kt)("inlineCode",{parentName:"p"},"deps")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"cmds"),"!"),(0,s.kt)("h2",{id:"output-syntax"},"Output syntax"),(0,s.kt)("p",null,"By default, Task just redirects the STDOUT and STDERR of the running commands\nto the shell in real-time. This is good for having live feedback for logging\nprinted by commands, but the output can become messy if you have multiple\ncommands running simultaneously and printing lots of stuff."),(0,s.kt)("p",null,"To make this more customizable, there are currently three different output\noptions you can choose:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"interleaved")," (default)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"group")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"prefixed"))),(0,s.kt)("p",null,"To choose another one, just set it to root in the Taskfile:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\noutput: 'group'\n\ntasks:\n  # ...\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"group")," output will print the entire output of a command once after it\nfinishes, so you will not have live feedback for commands that take a long time\nto run."),(0,s.kt)("p",null,"When using the ",(0,s.kt)("inlineCode",{parentName:"p"},"group")," output, you can optionally provide a templated message\nto print at the start and end of the group. This can be useful for instructing\nCI systems to group all of the output for a given task, such as with\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#grouping-log-lines"},"GitHub Actions' ",(0,s.kt)("inlineCode",{parentName:"a"},"::group::")," command"),"\nor ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?expand=1&view=azure-devops&tabs=bash#formatting-commands"},"Azure Pipelines"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\noutput:\n  group:\n    begin: '::group::{{.TASK}}'\n    end: '::endgroup::'\n\ntasks:\n  default:\n    cmds:\n      - echo 'Hello, World!'\n    silent: true\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ task default\n::group::default\nHello, World!\n::endgroup::\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"prefix")," output will prefix every line printed by a command with\n",(0,s.kt)("inlineCode",{parentName:"p"},"[task-name] ")," as the prefix, but you can customize the prefix for a command\nwith the ",(0,s.kt)("inlineCode",{parentName:"p"},"prefix:")," attribute:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\n\noutput: prefixed\n\ntasks:\n default:\n   deps:\n     - task: print\n       vars: {TEXT: foo}\n     - task: print\n       vars: {TEXT: bar}\n     - task: print\n       vars: {TEXT: baz}\n\n print:\n   cmds:\n     - echo "{{.TEXT}}"\n   prefix: "print-{{.TEXT}}"\n   silent: true\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ task default\n[print-foo] foo\n[print-bar] bar\n[print-baz] baz\n")),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"output")," option can also be specified by the ",(0,s.kt)("inlineCode",{parentName:"p"},"--output")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"-o")," flags."))),(0,s.kt)("h2",{id:"interactive-cli-application"},"Interactive CLI application"),(0,s.kt)("p",null,"When running interactive CLI applications inside Task they can sometimes behave\nweirdly, especially when the ",(0,s.kt)("a",{parentName:"p",href:"#output-syntax"},"output mode")," is set to something\nother than ",(0,s.kt)("inlineCode",{parentName:"p"},"interleaved")," (the default), or when interactive apps are run in\nparallel with other tasks."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"interactive: true")," tells Task this is an interactive application and Task\nwill try to optimize for it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  default:\n    cmds:\n      - vim my-file.txt\n    interactive: true\n")),(0,s.kt)("p",null,"If you still have problems running an interactive app through Task, please open\nan issue about it."),(0,s.kt)("h2",{id:"short-task-syntax"},"Short task syntax"),(0,s.kt)("p",null,"Starting on Task v3, you can now write tasks with a shorter syntax if they\nhave the default settings (e.g. no custom ",(0,s.kt)("inlineCode",{parentName:"p"},"env:"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"vars:"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"desc:"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"silent:")," , etc):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  build: go build -v -o ./app{{exeExt}} .\n\n  run:\n    - task: build\n    - ./app{{exeExt}} -h localhost -p 8080\n")),(0,s.kt)("h2",{id:"watch-tasks"},"Watch tasks"),(0,s.kt)("p",null,"With the flags ",(0,s.kt)("inlineCode",{parentName:"p"},"--watch")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"-w")," task will watch for file changes\nand run the task again. This requires the ",(0,s.kt)("inlineCode",{parentName:"p"},"sources")," attribute to be given,\nso task knows which files to watch."))}u.isMDXComponent=!0}}]);